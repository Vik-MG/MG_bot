# handlers/manager.py
import asyncio
import os
from aiogram.filters import Command
from aiogram import Bot, Router, types
from aiogram.types import CallbackQuery, InputMediaDocument, FSInputFile
from core.utils.logging_utils import setup_logger
from core.google_sheets import get_google_sheet, update_client_status
from html import escape
from dotenv import load_dotenv

router = Router()
logger = setup_logger(__name__)

load_dotenv()
GOOGLE_SHEET_URL = os.getenv("GOOGLE_SHEET_URL")

def determine_sheet_name(message_text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤ –∫–∞–∫–æ–π –ª–∏—Å—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"""
    return "–û–ø—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã" if "–æ–ø—Ç" in message_text.lower() else "–†–æ–∑–Ω–∏—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"

async def get_client_data(sheet_name: str, client_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Google Sheets"""
    worksheet = await get_google_sheet(sheet_name)
    all_data = await worksheet.get_all_values()
    return next((row for row in all_data if str(row[1]).strip() == str(client_id).strip()), None)

async def get_valid_files(file_list: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∏—Ö –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ"""
    if not file_list:
        return [], []

    files = [file.strip().replace("\\", "/") for file in file_list.split(",") if file.strip()]
    valid_files = [FSInputFile(f) for f in files if os.path.exists(f)]
    missing_files = [f for f in files if not os.path.exists(f)]
    return valid_files, missing_files


@router.callback_query(lambda c: c.data.startswith("details_"))
async def send_details(callback: CallbackQuery, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ + —Ñ–∞–π–ª—ã –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏."""
    client_id = callback.data.split("_")[1]
    sheet_name = determine_sheet_name(callback.message.text)

    client_data = await get_client_data(sheet_name, client_id)
    if not client_data:
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    status_updated = await update_client_status(sheet_name, client_id, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ")
    files_column_index = 3 if sheet_name == "–û–ø—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã" else 4

    details_msg = (
        f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {escape(client_data[0])}\n"
        f"üìå <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {escape(client_data[2])}\n"
        f"üìÇ <b>–§–∞–π–ª—ã:</b> {escape(client_data[files_column_index])}\n"
        f"üóí <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {escape(client_data[files_column_index + 1])}\n"
        f"üì≤ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {escape(client_data[files_column_index + 2])}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {escape(client_data[files_column_index + 3])}\n"
        f"üìÅ <b>–ö–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤:</b> {escape(client_data[files_column_index + 4])}\n"
        f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω' if status_updated else '‚ö† –û—à–∏–±–∫–∞'}"
    )

    await callback.message.edit_text(details_msg, parse_mode="HTML")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    valid_files, missing_files = await get_valid_files(client_data[files_column_index])

    if missing_files:
        logger.warning(f"‚ö† –°–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {missing_files}")
        await callback.message.answer(f"‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:\n" + "\n".join(missing_files))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ 10 –∑–∞ —Ä–∞–∑
    for i in range(0, len(valid_files), 10):
        batch = valid_files[i:i + 10]
        media_group = [InputMediaDocument(media=file) for file in batch]

        try:
            await bot.send_media_group(callback.message.chat.id, media_group)
            await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤: {e}")
            await callback.message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤.")

    await callback.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

@router.message(Command("sheet"))
async def send_sheet_link(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets."""
    await message.answer(f"üìÑ –°—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets: {GOOGLE_SHEET_URL}", reply_markup=types.ReplyKeyboardRemove())
