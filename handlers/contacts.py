# handlers/contacts.py 
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from core.google_sheets import initialize_google_sheet, get_google_sheet
from core.utils.logging_utils import setup_logger
from core.states import Form
from datetime import datetime
from aiogram import Bot
import os
import asyncio
from dotenv import load_dotenv
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
MANAGER_ID = os.getenv("MANAGER_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger(__name__)

# –°–æ–∑–¥–∞—ë–º Router
router = Router()

def get_actual_files(user_id: int) -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_folder = os.path.join("uploads", str(user_id))
    return sorted([
        os.path.join(user_folder, f) for f in os.listdir(user_folder)
        if os.path.isfile(os.path.join(user_folder, f))
    ])

@router.message(Form.contacts)
async def get_contacts(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets."""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}, –ö–æ–Ω—Ç–∞–∫—Ç—ã: {message.text}")
        contacts = message.text

        await state.update_data(contacts=contacts)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ FSM –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º: {data}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        await asyncio.sleep(2)  # –û–∂–∏–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤
        actual_files = get_actual_files(message.from_user.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ FSM –æ–¥–∏–Ω —Ä–∞–∑
        await state.update_data(file_list=",".join(actual_files))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        saved_files_count = len(actual_files)
        if saved_files_count != len(actual_files):
            logger.warning(f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–æ–≤! –í –ø–∞–ø–∫–µ {saved_files_count}, –≤ FSM {len(actual_files)}.")

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        def prepare_data_and_headers(client_type: str):
            """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Google Sheets."""
            if client_type == "–æ–ø—Ç–æ–≤—ã–π":
                return "–û–ø—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", ["–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞", "ID", "–ü—Ä–æ–µ–∫—Ç", "–§–∞–π–ª—ã", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–î–∞—Ç–∞", "–ö–æ–ª-–≤–æ", "–°—Ç–∞—Ç—É—Å"], [
                    data.get("name", ""),
                    message.from_user.id,
                    data.get("opt_project", ""),
                    ", ".join(actual_files),
                    data.get("combined_comment", "").strip(),
                    contacts,
                    timestamp,
                    saved_files_count,
                    "–ù–æ–≤—ã–π"
                ]
            elif client_type == "—Ä–æ–∑–Ω–∏—á–Ω—ã–π":
                return "–†–æ–∑–Ω–∏—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", ["–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞", "ID", "–ü—Ä–æ–µ–∫—Ç", "–ö–ª–∞–¥–±–∏—â–µ", "–§–∞–π–ª—ã", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–î–∞—Ç–∞", "–ö–æ–ª-–≤–æ", "–°—Ç–∞—Ç—É—Å"], [
                    data.get("name", ""),
                    message.from_user.id,
                    data.get("item_interest", ""),
                    data.get("cemetery", ""),
                    ", ".join(actual_files),
                    data.get("combined_comment", "").strip(),
                    contacts,
                    timestamp,
                    saved_files_count,
                    "–ù–æ–≤—ã–π"
                ]
            else:
                logger.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞.")
                return None, None, None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
        client_type = data.get("client_type", "").lower()
        sheet_name, headers, row = prepare_data_and_headers(client_type)

        if not sheet_name:
            await message.answer("‚ö† –û—à–∏–±–∫–∞: —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ó–∞–ø–∏—Å—å –≤ Google Sheets
        try:
            worksheet = await get_google_sheet(sheet_name)
            logger.debug(f"–õ–∏—Å—Ç {sheet_name} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")

            await initialize_google_sheet(worksheet, headers)
            logger.debug(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ {headers} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

            if row:
                await worksheet.append_row(row)
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã: {row}")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
                await message.answer("‚ö† –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if MANAGER_ID:
                client_category = "–û–ø—Ç–æ–≤—ã–π" if client_type == "–æ–ø—Ç–æ–≤—ã–π" else "–†–æ–∑–Ω–∏—á–Ω—ã–π"
                client_interest = data.get("opt_project", "–ö–∞–º–Ω–µ–æ–±—Ä–∞–±–æ—Ç—á–∏–∫") if client_type == "–æ–ø—Ç–æ–≤—ã–π" else data.get("item_interest", "–ü–∞–º—è—Ç–Ω–∏–∫–∏/–î—Ä—É–≥–∏–µ –∏–∑–¥–µ–ª–∏—è")

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"contact_{message.from_user.id}")],
                    [InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{message.from_user.id}")]
                ])

                notification = (f"üìù *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n"
                                f"üìÖ *–î–∞—Ç–∞:* {timestamp}\n"
                                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {data.get('name', 'Unknown')}\n"
                                f"üìå *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {client_category}\n"
                                f"üîç *–ò–Ω—Ç–µ—Ä–µ—Å:* {client_interest}\n"
                                f"üóí *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {data.get('combined_comment', '').strip()}\n"
                                f"üìÇ *–§–∞–π–ª—ã:* {saved_files_count}")

                await bot.send_message(MANAGER_ID, notification, reply_markup=keyboard, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()
