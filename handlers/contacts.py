# handlers/contacts.py 
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from core.google_sheets import initialize_google_sheet, get_google_sheet
from core.utils.logging_utils import setup_logger
from core.states import Form
from datetime import datetime
from aiogram import Bot
import os
import asyncio
from dotenv import load_dotenv
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from core.utils.locales import get_text, load_user_languages  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
MANAGER_ID = os.getenv("MANAGER_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger(__name__)

# –°–æ–∑–¥–∞—ë–º Router
router = Router()

def get_actual_files(user_id: int) -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_folder = os.path.join("uploads", str(user_id))
    if not os.path.exists(user_folder):
        return []
    
    return sorted([
        os.path.join(user_folder, f) for f in os.listdir(user_folder)
        if os.path.isfile(os.path.join(user_folder, f))
    ])

@router.message(Form.contacts)
async def get_contacts(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets."""
    try:
        user_id = message.from_user.id
        data = await state.get_data()
        lang = data.get("language", load_user_languages().get(str(user_id), "ru"))  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        contacts = message.text.strip()

        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}")
        await state.update_data(contacts=contacts)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        await asyncio.sleep(2)
        actual_files = get_actual_files(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ FSM
        file_list = data.get("file_list", "")
        if isinstance(file_list, str) and file_list:
            file_list = file_list.split(",")
        elif not isinstance(file_list, list):
            file_list = []

        file_list.extend(actual_files)
        file_list = sorted(set(file_list))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

        await state.update_data(file_list=",".join(file_list))
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
        client_type = data.get("client_type", "").lower()
        sheet_name = "–û–ø—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã" if client_type == "–æ–ø—Ç–æ–≤—ã–π" else "–†–æ–∑–Ω–∏—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
        if client_type == "–æ–ø—Ç–æ–≤—ã–π":
            headers = ["–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞", "ID", "–ü—Ä–æ–µ–∫—Ç", "–§–∞–π–ª—ã", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–î–∞—Ç–∞", "–ö–æ–ª-–≤–æ", "–°—Ç–∞—Ç—É—Å"]
            row = [
                data.get("name", ""),
                user_id,
                data.get("opt_project", ""),
                ", ".join(file_list),
                data.get("combined_comment", "").strip(),
                contacts,
                timestamp,
                len(file_list),
                "–ù–æ–≤—ã–π"
            ]
        else:  # –†–æ–∑–Ω–∏—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            headers = ["–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞", "ID", "–ü—Ä–æ–µ–∫—Ç", "–ö–ª–∞–¥–±–∏—â–µ", "–§–∞–π–ª—ã", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–î–∞—Ç–∞", "–ö–æ–ª-–≤–æ", "–°—Ç–∞—Ç—É—Å"]
            row = [
                data.get("name", ""),
                user_id,
                data.get("item_interest", ""),
                data.get("cemetery", ""),
                ", ".join(file_list),
                data.get("combined_comment", "").strip(),
                contacts,
                timestamp,
                len(file_list),
                "–ù–æ–≤—ã–π"
            ]

        # –ó–∞–ø–∏—Å—å –≤ Google Sheets
        try:
            worksheet = await get_google_sheet(sheet_name)
            await initialize_google_sheet(worksheet, headers)
            await worksheet.append_row(row)
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã: {row}")
            await message.answer(get_text(lang, "thank_you"))  # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if MANAGER_ID:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{user_id}")]
                ])
                notification = (f"üìù *{get_text(lang, 'new_order')}*\n"
                                f"üìÖ *{get_text(lang, 'date')}:* {timestamp}\n\n"
                                f"üë§ *{get_text(lang, 'client')}:* {data.get('name', 'Unknown')}\n"
                                f"üìå *{get_text(lang, 'category')}:* {client_type.capitalize()}\n"
                                f"üóí *{get_text(lang, 'comment')}:* {data.get('combined_comment', '').strip()}\n"
                                f"üìÇ *{get_text(lang, 'files')}:* {len(file_list)}")
                await bot.send_message(MANAGER_ID, notification, reply_markup=keyboard, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            await message.answer(get_text(lang, "error_saving_data"))

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        await message.answer(get_text(lang, "error_saving_data"))

    finally:
        await state.clear()
